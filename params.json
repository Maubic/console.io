{"name":"Console.io","tagline":"JavaScript Remote Web Console","body":"# Console.IO\r\n\r\nConsole.IO is a NodeJS project. It provides Remote Web Console for websites and web applications.\r\nIt uses express.io (express & socket.io) to provide user real time experience.\r\n\r\nIt works pretty much on all modern browsers, mobile devices, Smart TVs, etc\r\n\r\nTested on: \r\n* Toshiba TV (2011, 2012)\r\n* LG NetCast TV (2011, 2012, 2013)\r\n* Philips NetTV (2011, 2012)\r\n* Samsung TV (2010, 2011, 2012, 2013)\r\n* Technika Avtrex STB\r\n* Firefox, Safari, Opera, Chrome, Maple and IE\r\n* iPhone, iPod, iPad, Android browser, windows 8 phone etc\r\n\r\n\r\n### Node NPM package\r\n#### Install and start Console.IO server\r\n\r\n```bash\r\nnpm install -g xconsole.io\r\nconsoleio\r\n```\r\n\r\n### Install from Source\r\n#### Install and start or execute install.bat and start.bat (window user only)\r\n\r\n```bash\r\nnpm install express.io redis\r\nnode ./server/main.js\r\n```\r\n\r\n### Include scripts in your web page\r\n\r\ninclude inject.js scripts with config parameters\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"inject.js?url=http://nodeserver:port&web=true&...\"></script>\r\n```\r\n\r\nOR create a create ConfigIO global object with config options\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"configIO.js\"></script>\r\n<script type=\"text/javascript\" src=\"inject.js\"></script>\r\n```\r\n\r\nconfigIO.js\r\n```html\r\nwindow.ConfigIO = {\r\n    //URL to connect back\r\n\turl: 'http://nodeserver:port/',\r\n\r\n    // default is true if not defined, No connection will be made to server if set to false\r\n    socket: true,\r\n\r\n\t// set it to true to enable WebIO (web console)  (optional)\r\n\tweb: true,\r\n\r\n    // WebIO config (optional)\r\n\tfilters: ['log','error'],\r\n\tsearch: 'test',\r\n\tpageSize: 100,\r\n\r\n    // WebIO UI config (optional)\r\n\tdocked: false,\r\n    position: 'bottom',\r\n    height: '300px',\r\n    width: '99%'\r\n};\r\n```\r\n\r\nOR you can include all files individually\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"<Local Folder OR Node Server/socket.io/socket.io.js\"></script>\r\n<script type=\"text/javascript\" src=\"<Local Folder OR Node Server>/addons/console.io.js\"></script>\r\n<script type=\"text/javascript\" src=\"<Local Folder OR Node Server>/addons/socket.js\"></script>\r\n<script type=\"text/javascript\" src=\"<Local Folder OR Node Server>/addons/web.js\"></script>\r\n<script type=\"text/javascript\" src=\"<Local Folder OR Node Server>/addons/inject.js?url=http://nodeserver:port\"></script>\r\n<link type=\"text/css\" media=\"all\" href=\"<Local Folder OR Node Server>/resources/console.css\" />\r\n```\r\n\r\nYou can also capture iframe console logs. To do that just include inject.js script file in child document.\r\n\r\nVisit http://nodeserver:port/ for ConsoleIO interface (Tested on Chrome Browsers)\r\n\r\n![Screen shot](https://raw.github.com/nkashyap/console.io/master/console.io.png)\r\n\r\nNote:\r\n* ![Online icons](https://raw.github.com/nkashyap/console.io/master/app/resources/icons/online.png) Device is registered and connected.\r\n* ![Offline icons](https://raw.github.com/nkashyap/console.io/master/app/resources/icons/offline.png) Device is registered but offline.\r\n* ![Subscribe icons](https://raw.github.com/nkashyap/console.io/master/app/resources/icons/subscribe.gif) Device is subscribed (double click on Online icon to subscribe).\r\n* ![WebIO icons](https://raw.github.com/nkashyap/console.io/master/app/resources/icons/console.gif) WebIO (web console) icon to enable/disable WebIO remotely.\r\n\r\n### Console.IO Web only\r\n\r\nConsole.IO now also support web only mode. It allow user to access console logs on the device without any need of node server.\r\n\r\nInclude following script in the web page to auto inject files\r\n\r\n```html\r\n    <script type=\"text/javascript\" src=\"inject.js?web=true&socket=false\"></script>\r\n```\r\n\r\nFiles can be included manually in the web page as well, steps are given below.\r\n\r\ndefine ConfigIO object to set web only mode\r\n\r\n```html\r\nwindow.ConfigIO = {\r\n    socket: false,\r\n\tweb: true,\r\n\t....\r\n};\r\n```\r\n\r\nand include following scripts in the web page\r\n\r\n```html\r\n    <script type=\"text/javascript\" src=\"inject.js\"></script>\r\n    <script type=\"text/javascript\" src=\"console.js\"></script>\r\n    <script type=\"text/javascript\" src=\"web.js\"></script>\r\n    <link type=\"text/css\" media=\"all\" href=\"app/resources/console.css\" />\r\n```\r\n\r\n### Console.IO Editor\r\n\r\nYou can execute commands on remote client from Console.IO. You can execute single & multilines javascript code.\r\n\r\nShortcuts: \r\n* Ctrl+Enter: execute command\r\n* Ctrl+Space: autocomplate\r\n* Ctrl-Q: toggle comments\r\n* Shift-Ctrl-Q: fold/unfold code\r\n\r\nNote: All multilines code should be wrapped within self executable function. E.G\r\n```html\r\n(function doSomeThing(){\r\n .......\r\n}())\r\n```\r\n\r\n### Console.IO Device and Tabs\r\n* Files: Show all attached javascript and css files in the web page\r\n* Status: Device Status and some basic information\r\n* Source: Double click on a file in file explorer to view file content\r\n* Preview: HTML dom structure\r\n* Console: Remote console \r\n\t* Pause incoming logs\r\n\t* Clear logs\r\n\t* Export logs\r\n\t* Change page size\r\n\t* Search word or use regex to filter logs\r\n\t* Filter logs by type\r\n\r\n### Console.IO WebIO (web console)\r\n* Control it remotely\r\n\t* Pause incoming logs\r\n\t* Clear logs\r\n\t* Change page size\r\n\t* Search word or use regex to filter logs\r\n\t* Filter logs by type\r\n* TODO\r\n    * Ability to configure height, width, position & remote control.\r\n    * Control logging speed\r\n    * Scroll through logs (Smart Tv/mobile/tablets)\r\n\r\n### Console API methods supported\r\n * console.assert(x)\r\n * console.count(key)\r\n * console.time(name, reset)\r\n * console.timeEnd(name)\r\n * console.debug(arguments...)\r\n * console.warn(arguments...)\r\n * console.info(arguments...)\r\n * console.log(arguments...)\r\n * console.dir(object)\r\n * console.dirxml(HTML Element)\r\n * console.error(error)\r\n * console.exception(error)\r\n * console.trace()\r\n * TODO\r\n    * console.group()\r\n    * console.groupCollapsed()\r\n    * console.groupEnd()\r\n    * console.markTimeline()\r\n    * console.timestamp()\r\n    * console.profiles\r\n    * console.profile()\r\n    * console.profileEnd()\r\n\r\n## Configure Console.IO Server\r\nAll server side configurations are defined in server/config.js file.\r\nIf you have install using npm -g then you will find it in C:\\Users\\[USERNAME]\\AppData\\Roaming\\npm\\node_modules\\xconsole.io\\server folder\r\n\r\n### Server Port\r\nYou can change default (8082) port number\r\n\r\n```html\r\nexpress: {\r\n    production: {\r\n        ...\r\n        { 'port-number': 8082 },\r\n        { 'session-key': 'console.io' },\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n### SSL Support\r\n\r\nChange following in server side config file to enable server to run over SSL and use \"https\" instead of \"http\" to inject files on client.\r\nTo generate your own SSL Certificate please check this [How to generate custom SSL certificates](http://forum.synology.com/wiki/index.php/How_to_generate_custom_SSL_certificates).\r\n\r\n```html\r\nvar config = {\r\n    .....\r\n    https: {\r\n        enable: true, // change true/false to enable and disable SSL\r\n        key: './certificates/server.key',\r\n        certificate: './certificates/server.crt',\r\n        ca: './certificates/ca.crt'\r\n    },\r\n    .....\r\n}\r\n```\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"inject.js?url=https://nodeserver:port&web=true&...\"></script>\r\n```\r\n\r\n\r\n### Scaling server\r\nConsole.IO use socket.io and in order to scale socket.io you need to run redis server.\r\nChange following value in config file before starting the Console.IO server and\r\non window platform (/redis/redis-server.exe) is started by server itself but on other platforms you have to start redis server manually.\r\n\r\n```html\r\nredis: {\r\n        enable: true, // <- true to enable socket.io scaling\r\n        process: 6 // number of process to run\r\n    }\r\n```\r\n\r\n### Example to setup AngularJS global $http error handler\r\n```html\r\nangular.module('app', ['ngResource',])\r\n\t.config(function ($httpProvider)\r\n\t{\r\n\t\t$httpProvider.responseInterceptors.push(function globalErrorHandling($q) {\r\n\t\t\treturn function(promise) {\r\n\t\t\t\treturn promise.then(function(successResponse) {\r\n\t\t\t\t\tconsole.info(successResponse);\r\n\t\t\t\t\treturn successResponse;\r\n\r\n\t\t\t\t}, function(errorResponse) {\r\n\t\t\t\t\tconsole.exception(errorResponse);\r\n\t\t\t\t\treturn $q.reject(errorResponse);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t});\r\n\t});\r\n});\r\n```\r\n\r\n### TODO\r\n * Update Readme with full feature list\r\n * Add JSDoc & Unit Tests\r\n * Add IISNode configuration steps\r\n\r\n### Copyright and license\r\n MIT LICENSE \r\n\r\n### Reference\r\n * [Javascript Stacktrace] (https://github.com/eriwen/javascript-stacktrace)\r\n * [codemirror] (http://codemirror.net/)\r\n * [express.io] (https://github.com/techpines/express.io)\r\n * [Socket.io] (http://socket.io/#how-to-use)\r\n * [prettify] (https://code.google.com/p/google-code-prettify/)\r\n * [dhtmlx] (http://dhtmlx.com/) [GPL LICENSE]\r\n * [OpenSSL] (http://www.openssl.org/)\r\n * [Html2Canvas] (http://html2canvas.hertzen.com/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}